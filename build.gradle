apply plugin: 'java'
apply plugin: 'eclipse'


sourceCompatibility = 1.7
version = '0.1'

jar {
baseName = 'getdns-java'
version =  '0.1'
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

sourceSets {
    examples {
    	java
    	compileClasspath += main.output
    	runtimeClasspath += main.output
    }
}

task buildJniLib(type:Exec) {

  if(!new File(javahome+'/include/jni.h').exists()) {
    throw new InvalidUserDataException("Please configure javahome in gradle.properties")
  }

  if(!new File('/usr/local/include/getdns/getdns.h').exists()) {
    throw new InvalidUserDataException("Please install getdns 0.1.7 release or above configured with --with-libevent.")
  }

  if(!new File('/usr/local/include/getdns/getdns_ext_libevent.h').exists()) {
    throw new InvalidUserDataException("It looks like getdns is not configured with libevent. Please install getdns 0.1.7 release or above configured with --with-libevent.")
  }

  workingDir './src/native/jni/'
  def libraryExtension = 'so'
  def systemJNIPath = 'linux'
  
  if(System.properties['os.name'].toLowerCase().contains('mac')){
    libraryExtension = 'dylib'
    systemJNIPath = 'darwin'
  }
  commandLine 'gcc', '-I'+javahome+'/include', '-I'+javahome+'/include/'+systemJNIPath, '-shared','-o',project.libsDir.getPath()+'/libgetdnsconnector.'+libraryExtension,'-fPIC','-I/usr/local/include','-L/usr/local/lib', 'java_util.c', 'GetDNSContext.c', 'GetDNS_common.c', 'getdns_util.c', '-lgetdns','-lldns','-lidn', '-levent','-lgetdns_ext_event'

  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task installJniLib(type:Copy) {
  def libraryExtension = 'so'
  def systemJNIPath = 'linux'

  if(System.properties['os.name'].toLowerCase().contains('mac')){
    libraryExtension = 'dylib'
    systemJNIPath = 'darwin'
  }
  from project.libsDir.getPath()+'/libgetdnsconnector.'+libraryExtension
  into '/usr/local/lib'
}

task runExample(type:JavaExec)  {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.examples.runtimeClasspath 
    jvmArgs '-Djava.library.path='+project.libsDir.getPath()
    environment "LD_LIBRARY_PATH", "/usr/local/lib"
    doFirst {
    main = System.getProperty("example")
    def map = [:]
    sourceSets.examples.java.each { File file ->
                            map[file.name.replace(".java","")] = file.getCanonicalPath().replace(project.projectDir.getCanonicalPath()+"/src/examples/java/","").replace(".java","")
    }
    if(main == null || map[main] == null){
        println "Usage: -Dexample=<exampleName> runExample"
     	println ("Please provide one of the below exampleName to execute")
        map.each{
            key, value -> println key;
        }
        throw new InvalidUserDataException("Invalid or no example name provided")
     }
     else
         main = map[main]
   }
}
runExample.dependsOn buildJniLib
buildJniLib.dependsOn assemble

task printBuildInfo << {
    print buildJniLib.output()
}


test {
    jvmArgs '-Djava.library.path='+System.getProperty("user.dir")+'/build/libs'
    environment "LD_LIBRARY_PATH", "/usr/local/lib"
}


